from flask import Flask
from threading import Thread
from telethon import TelegramClient, events
import asyncio

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
app = Flask('')

@app.route('/')
def home():
    return "I'm alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API
api_id = 25704479
api_hash = "a6d27fc2500314ab597a057b8e8761b3"

client = TelegramClient('session', api_id, api_hash)

mining = False
OWNER_ID = None  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞

# ‚úÖ –ö–æ–º–∞–Ω–¥—ã
@client.on(events.NewMessage(pattern='.–∫—Ç–æ–ª–æ—Ö'))
async def ping_handler(event):
    await event.reply('@waaysexz –ª–æ—Ö')
    
@client.on(events.NewMessage(pattern='/ping'))
async def ping_handler(event):
    await event.reply('Pong! –Ø –∂–∏–≤!')

@client.on(events.NewMessage(pattern='/help'))
async def help_handler(event):
    await event.reply(
        "üìã –ö–æ–º–∞–Ω–¥—ã —é–∑–µ—Ä–±–æ—Ç–∞:\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∂–∏–≤ –ª–∏ –±–æ—Ç\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        ".mine ‚Äî –Ω–∞—á–∞—Ç—å —Å–ø–∞–º–∏—Ç—å '–∫–æ–ø' –≤ @mine_evo_gold_bot\n"
        ".stopmine ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º\n"
       ".–∫—Ç–æ–ª–æ—Ö - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ—Ö–æ–≤"
    )

@client.on(events.NewMessage(pattern=r'\.mine'))
async def start_mine(event):
    if event.sender_id != OWNER_ID:
        return
    global mining
    if mining:
        await event.reply("‚õè –£–∂–µ –º–∞–π–Ω—é...")
        return
    await event.reply("üöÄ –ù–∞—á–∏–Ω–∞—é –º–∞–π–Ω–∏—Ç—å –≤ @mine_evo_gold_bot")
    mining = True
    while mining:
        try:
            await client.send_message("@mine_evo_gold_bot", "–∫–æ–ø")
            await asyncio.sleep(2.5)
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            break

@client.on(events.NewMessage(pattern=r'\.stopmine'))
async def stop_mine(event):
    if event.sender_id != OWNER_ID:
        return
    global mining
    if mining:
        mining = False
        await event.reply("üõë –ú–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await event.reply("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –º–∞–π–Ω—é.")

# üîÅ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
async def keep_alive_ping():
    while True:
        print("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω...")
        await asyncio.sleep(60)

# üîß –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    global OWNER_ID
    await client.start()
    me = await client.get_me()
    OWNER_ID = me.id
    print(f"üîã –Æ–∑–µ—Ä–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username} (ID: {OWNER_ID})")
    await asyncio.gather(client.run_until_disconnected(), keep_alive_ping())

# üü¢ –ó–∞–ø—É—Å–∫
keep_alive()  # <-- –î–û–õ–ñ–ù–û –ë–´–¢–¨ –î–û with client
with client:
    client.loop.run_until_complete(main())
